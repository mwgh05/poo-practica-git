Rodrigo Nunez
--------------------------------

// crear la red
docker network create --driver bridge --subnet 10.0.0.32/28 rodri_comidasnet

docker volume create vol_cfg_picante
docker volume create vol_cfg_dulce

// iniciar un servidor de configuración en modo configserver indicando la red y el nombre del replica set
// lo ideal es agregar mas servidores de configuracion en la replica
// mongo puede funcionar en 3 modos: configuracion, router y datos
// en modo datos puede configurarse como standalone, o como sharding
// todos los servidores de tipo data y configuracion se pueden replicar 
// cuando se arranca un server y se le dice la replica, esta indicando cual es el conjunto
// de servidores que se copian datos entre ellos para hacer la replicacion

docker run -d --net rodri_comidasnet -v vol_cfg_picante:/data/configdb --ip 10.0.0.34 --name cfg_picante mongo mongod --port 27017 --configsvr --replSet "repcfgfood" --dbpath /data/configdb
docker run -d --net rodri_comidasnet -v vol_cfg_dulce:/data/configdb --ip 10.0.0.35 --name cfg_dulce mongo mongod --port 27017 --configsvr --replSet "repcfgfood" --dbpath /data/configdb

// ingresamos a un servidor de configuracion, y solo a uno
docker exec -it cfg_dulce bash

// hacerle init al servicio de replica set para que haya replicacion entre los servidores de configuracion
rs.initiate(
  {
    _id: "repcfgfood",
    configsvr: true,
    members: [
      { _id : 0, host : "10.0.0.34:27017" },
      { _id : 1, host : "10.0.0.35:27017" }
    ]
  }
);

// ejecutar 
rs.status() // me entrega estadisticas del estado de la replicacion


// inicializo shards y asignarlos a una replica, replica que aun no está activa pero se declara cual es

docker volume create vol_italian_food1
docker volume create vol_italian_food2
docker volume create vol_mex_food1
docker volume create vol_mex_food2

docker run -d --net rodri_comidasnet --ip 10.0.0.36 -v vol_italian_food1:/data/db --name italian_food1 mongo mongod --port 27017 --shardsvr --replSet "rep_italiana" --dbpath /data/db
docker run -d --net rodri_comidasnet --ip 10.0.0.38 -v vol_italian_food2:/data/db --name italian_food2 mongo mongod --port 27017 --shardsvr --replSet "rep_italiana" --dbpath /data/db
docker run -d --net rodri_comidasnet --ip 10.0.0.37 -v vol_mex_food1:/data/db --name mex_food1 mongo mongod --port 27017 --shardsvr --replSet "rep_mex" --dbpath /data/db
docker run -d --net rodri_comidasnet --ip 10.0.0.39 -v vol_mex_food2:/data/db --name mex_food2 mongo mongod --port 27017 --shardsvr --replSet "rep_mex" --dbpath /data/db

// conectarse a uno de los servidores e inicializar la replica entre ellos
// me conecto a un shardserver que sea miembro de una de las replicaas para inicializar la replica

docker exec -it italian_food1 mongo 
rs.initiate(
  {
    _id : "rep_italiana",
    members: [
      { _id : 0, host : "10.0.0.36:27017" },
      { _id : 1, host : "10.0.0.38:27017" }
    ]
  }
);

// repito el mismo proceso con la otra replica, me conecto a uno de los members

// me conecto a un shardserver que sea miembro de la repLimon para inicializar la rep
rs.initiate(
  {
    _id : "rep_mex",
    members: [
      { _id : 0, host : "10.0.0.37:27017" },
      { _id : 1, host : "10.0.0.39:27017" }
    ]
  }
);


// para el sistema de voting es mejor agregar un arbitro
docker run -d --net rodri_comidasnet --ip 10.0.0.40 --name italian_arb mongo mongod --port 27017 --replSet rep_italiana
docker run -d --net rodri_comidasnet --ip 10.0.0.41 --name mex_arb mongo mongod --port 27017 --replSet rep_mex

// me conecto a a algun servidor que este en la replica y le agrego su arbitro
docker exec -it italian_food1 mongo
rs.addArb("10.0.0.40:27017")
rs.status();


agrego el arbitro la otra replica
docker exec -it mex_food1 mongo
rs.addArb("10.0.0.41:27017")


// vamos a inicializar el router indicando cuales son los servidores de configuracion
docker run -d -p 27017:27017 --net rodri_comidasnet --ip 10.0.0.42 --name food_router1 mongo mongos --port 27017 --configdb repcfgfood/10.0.0.34:27017,10.0.0.35:27017

// conectamos al router
docker exec -it food_router1 mongo

sh.addShard( "rep_italiana/10.0.0.36:27017");  hacemos shards con un server en cada replica, no hace faltan los otros porque ya estan en replica entre si
sh.addShard( "rep_mex/10.0.0.37:27017");

sh.status();
ya tenemos las replicas listas, el router ya se le dijo cuales son los shardservers
///////////////////////////////////////////////////////////
////// ya queda todo listo a nivel de infraestructura /////
///////////////////////////////////////////////////////////


procedemos a configurar la distribucion de datos del shard

conectarnos al router y probamos

sh.addShardTag("rep_italiana", "italiana");
sh.addShardTag("rep_mex", "mexicana");

sh.addTagRange( "comidasdb.platillos",
                { cocina: "italiana"},
                { cocina: "italiana999"},
                "italiana"
              );

sh.addTagRange( "comidasdb.platillos",
                { cocina: "mexicana"},
                { cocina: "mexicana999"},
                "mexicana"
              );


// Indico cual va a ser la base de datos que va a soportar sharding
sh.enableSharding("comidasdb");

// luego el collection y el campo del collection que va servir como shardkey
sh.shardCollection("comidasdb.platillos", { cocina : 1 } )

sh.status();



// con eso terminado ya puedo probar el sharding y la replica que funcionan correctamente

// para iniciar lo ideal es: luego los de sharding, luero arb, luego config y finalmente routers
-------------------
docker start mex_food2
docker start mex_food1
docker start italian_food2
docker start italian_food1 
docker start mex_arb
docker start italian_arb
docker start cfg_dulce
docker start cfg_picante


// para apagar: primero router, luego shards y de ultimo configs
docker stop mex_arb
docker stop italian_arb
docker stop mex_food2
docker stop mex_food1
docker stop italian_food2
docker stop italian_food1 
docker stop cfg_dulce
docker stop cfg_picante

//rs.remove("x.x.x.x:27024")


docker rm mex_arb
docker rm italian_arb
docker rm mex_food2
docker rm mex_food1
docker rm italian_food2
docker rm italian_food1 
docker rm cfg_dulce
docker rm cfg_picante